/*
@auth Jerry   common rabitmq components 

*/


package mqueue

import (
	"context"
	"encoding/json"
	"fmt"
	"sync"
	"time"

	"github.com/gogf/gf/v2/os/glog"
	amqp "github.com/rabbitmq/amqp091-go"
)

// MessageType 定义消息类型枚举
type MessageType string

const (
	// 通用消息类型定义
	MessageTypeTrajectory   MessageType = "trajectory"
	MessageTypeUser         MessageType = "user"
	MessageTypeOrder        MessageType = "order"
	MessageTypeNotification MessageType = "notification"
	MessageTypeSystem       MessageType = "system"
)

// MessageQueue 通用消息队列接口
type MessageQueue interface {
	Publish(ctx context.Context, messageType MessageType, data interface{}) error
	PublishBatch(ctx context.Context, messages []Message) error
	Subscribe(ctx context.Context, messageType MessageType, handler func(ctx context.Context, data interface{}) error) error
	GetMetrics() Metrics
	Close()
}

// RabbitMQConfig RabbitMQ配置
type RabbitMQConfig struct {
	URL               string        // RabbitMQ连接URL
	ExchangeName      string        // 交换机名称
	ExchangeType      string        // 交换机类型
	PrefetchCount     int           // 预取消息数量
	ReconnectDelay    time.Duration // 重连延迟
	PublishTimeout    time.Duration // 发布超时
	HeartbeatInterval time.Duration // 心跳间隔
	ConnectionTimeout time.Duration // 连接超时
}

// Metrics 指标收集结构
type Metrics struct {
	PublishCount   int64         // 发布消息计数
	ConsumeCount   int64         // 消费消息计数
	ErrorCount     int64         // 错误计数
	ProcessingTime time.Duration // 处理时间
}

// RabbitMQClient RabbitMQ客户端
type RabbitMQClient struct {
	conn            *amqp.Connection
	channel         *amqp.Channel
	config          RabbitMQConfig
	messageHandlers map[MessageType]func(ctx context.Context, data interface{}) error
	metrics         Metrics
	mu              sync.RWMutex
}

// Message 通用消息结构
type Message struct {
	Type      MessageType `json:"type"`
	Data      interface{} `json:"data"`
	Timestamp int64       `json:"timestamp"`
	TraceID   string      `json:"trace_id,omitempty"`
}

// 预先分配内存的消息结构池
var msgPool = sync.Pool{
	New: func() interface{} {
		return &Message{}
	},
}

// NewRabbitMQClient 创建RabbitMQ客户端
func NewRabbitMQClient(config RabbitMQConfig) (*RabbitMQClient, error) {
	// 默认配置
	if config.ExchangeName == "" {
		config.ExchangeName = "system_exchange"
	}
	if config.ExchangeType == "" {
		config.ExchangeType = "topic"
	}
	if config.PrefetchCount == 0 {
		config.PrefetchCount = 10
	}
	if config.ReconnectDelay == 0 {
		config.ReconnectDelay = 5 * time.Second
	}
	if config.PublishTimeout == 0 {
		config.PublishTimeout = 30 * time.Second
	}
	if config.HeartbeatInterval == 0 {
		config.HeartbeatInterval = 10 * time.Second
	}
	if config.ConnectionTimeout == 0 {
		config.ConnectionTimeout = 30 * time.Second
	}

	// 建立连接
	conn, err := amqp.Dial(config.URL)
	if err != nil {
		return nil, fmt.Errorf("failed to connect to RabbitMQ: %v", err)
	}

	// 创建信道
	channel, err := conn.Channel()
	if err != nil {
		conn.Close()
		return nil, fmt.Errorf("failed to open channel: %v", err)
	}

	// 设置预取数量
	err = channel.Qos(config.PrefetchCount, 0, false)
	if err != nil {
		channel.Close()
		conn.Close()
		return nil, fmt.Errorf("failed to set QoS: %v", err)
	}

	// 声明交换机
	err = channel.ExchangeDeclare(
		config.ExchangeName,
		config.ExchangeType,
		true,  // 持久化
		false, // 自动删除
		false, // 内部
		false, // 不等待
		nil,   // 参数
	)
	if err != nil {
		channel.Close()
		conn.Close()
		return nil, fmt.Errorf("failed to declare exchange: %v", err)
	}

	client := &RabbitMQClient{
		conn:            conn,
		channel:         channel,
		config:          config,
		messageHandlers: make(map[MessageType]func(ctx context.Context, data interface{}) error),
	}

	// 启动连接监控
	go client.monitorConnection(context.Background())

	return client, nil
}

// monitorConnection 监控RabbitMQ连接状态并处理断连
func (c *RabbitMQClient) monitorConnection(ctx context.Context) {
	connErrorChan := c.conn.NotifyClose(make(chan *amqp.Error))
	go func() {
		for {
			select {
			case <-ctx.Done():
				return
			case err := <-connErrorChan:
				glog.Errorf(ctx, "RabbitMQ连接断开: %v，尝试重连", err)
				for i := 0; i < 5; i++ {
					if err := c.reconnect(); err == nil {
						glog.Info(ctx, "RabbitMQ重连成功")
						return
					}
					time.Sleep(c.config.ReconnectDelay)
				}
				glog.Error(ctx, "RabbitMQ重连失败，达到最大重试次数")
			}
		}
	}()
}

// reconnect 重新连接RabbitMQ
func (c *RabbitMQClient) reconnect() error {
	c.mu.Lock()
	defer c.mu.Unlock()

	// 关闭旧连接
	if c.channel != nil {
		c.channel.Close()
	}
	if c.conn != nil {
		c.conn.Close()
	}

	// 重新连接
	var err error
	c.conn, err = amqp.Dial(c.config.URL)
	if err != nil {
		return fmt.Errorf("重连失败: %v", err)
	}

	// 创建新信道
	c.channel, err = c.conn.Channel()
	if err != nil {
		c.conn.Close()
		return fmt.Errorf("创建信道失败: %v", err)
	}

	// 设置预取数量
	err = c.channel.Qos(c.config.PrefetchCount, 0, false)
	if err != nil {
		c.channel.Close()
		c.conn.Close()
		return fmt.Errorf("设置QoS失败: %v", err)
	}

	// 重新声明交换机
	err = c.channel.ExchangeDeclare(
		c.config.ExchangeName,
		c.config.ExchangeType,
		true,  // 持久化
		false, // 自动删除
		false, // 内部
		false, // 不等待
		nil,   // 参数
	)
	if err != nil {
		c.channel.Close()
		c.conn.Close()
		return fmt.Errorf("声明交换机失败: %v", err)
	}

	// 重新订阅所有队列
	for msgType, handler := range c.messageHandlers {
		// 为每个消息类型创建上下文副本
		subCtx := context.Background()
		err := c.Subscribe(subCtx, msgType, handler)
		if err != nil {
			glog.Errorf(subCtx, "重新订阅失败 %s: %v", msgType, err)
		}
	}

	return nil
}

// Publish 发布消息
func (c *RabbitMQClient) Publish(ctx context.Context, messageType MessageType, data interface{}) error {
	startTime := time.Now()

	// 构建消息
	message := Message{
		Type:      messageType,
		Data:      data,
		Timestamp: time.Now().Unix(),
	}

	// 从上下文获取trace_id
	if traceID, ok := ctx.Value("trace_id").(string); ok {
		message.TraceID = traceID
	}

	// 序列化消息
	body, err := json.Marshal(message)
	if err != nil {
		c.incrementErrorCount()
		return fmt.Errorf("failed to marshal message: %v", err)
	}

	// 发布消息
	ctx, cancel := context.WithTimeout(ctx, c.config.PublishTimeout)
	defer cancel()

	err = c.channel.PublishWithContext(
		ctx,
		c.config.ExchangeName,
		string(messageType),
		false,
		false,
		amqp.Publishing{
			ContentType:  "application/json",
			Body:         body,
			DeliveryMode: amqp.Persistent,
			Timestamp:    time.Now(),
		},
	)

	if err != nil {
		c.incrementErrorCount()
		return fmt.Errorf("failed to publish message: %v", err)
	}

	c.incrementPublishCount()
	c.addProcessingTime(time.Since(startTime))
	glog.Ctx(ctx).Infof("Message published: type=%s", messageType)
	return nil
}

// PublishBatch 批量发布消息
func (c *RabbitMQClient) PublishBatch(ctx context.Context, messages []Message) error {
	startTime := time.Now()

	// 确认模式
	if err := c.channel.Confirm(false); err != nil {
		c.incrementErrorCount()
		return fmt.Errorf("无法设置确认模式: %v", err)
	}

	confirms := c.channel.NotifyPublish(make(chan amqp.Confirmation, len(messages)))

	// 创建超时上下文
	ctx, cancel := context.WithTimeout(ctx, c.config.PublishTimeout)
	defer cancel()

	// 批量发布消息
	for _, message := range messages {
		body, err := json.Marshal(message)
		if err != nil {
			c.incrementErrorCount()
			return fmt.Errorf("序列化消息失败: %v", err)
		}

		err = c.channel.PublishWithContext(
			ctx,
			c.config.ExchangeName,
			string(message.Type),
			false,
			false,
			amqp.Publishing{
				ContentType:  "application/json",
				Body:         body,
				DeliveryMode: amqp.Persistent,
				Timestamp:    time.Now(),
			},
		)

		if err != nil {
			c.incrementErrorCount()
			return fmt.Errorf("发布消息失败: %v", err)
		}
	}

	// 等待所有确认
	confirmed := 0
	for confirmed < len(messages) {
		select {
		case confirmation := <-confirms:
			if confirmation.Ack {
				confirmed++
			} else {
				c.incrementErrorCount()
				return fmt.Errorf("消息未确认")
			}
		case <-ctx.Done():
			c.incrementErrorCount()
			return fmt.Errorf("发布超时: %v", ctx.Err())
		}
	}

	c.mu.Lock()
	c.metrics.PublishCount += int64(len(messages))
	c.mu.Unlock()

	c.addProcessingTime(time.Since(startTime))
	glog.Ctx(ctx).Infof("批量发布消息成功: count=%d", len(messages))
	return nil
}

// Subscribe 订阅消息
func (c *RabbitMQClient) Subscribe(ctx context.Context, messageType MessageType, handler func(ctx context.Context, data interface{}) error) error {
	// 声明队列
	queueName := fmt.Sprintf("%s_queue", messageType)
	queue, err := c.channel.QueueDeclare(
		queueName,
		true,  // 持久化
		false, // 不自动删除
		false, // 非排他
		false, // 不等待
		nil,   // 参数
	)
	if err != nil {
		return fmt.Errorf("failed to declare queue: %v", err)
	}

	// 绑定队列
	err = c.channel.QueueBind(
		queue.Name,
		string(messageType),
		c.config.ExchangeName,
		false,
		nil,
	)
	if err != nil {
		return fmt.Errorf("failed to bind queue: %v", err)
	}

	// 注册处理器
	c.mu.Lock()
	c.messageHandlers[messageType] = handler
	c.mu.Unlock()

	// 消费消息
	msgs, err := c.channel.Consume(
		queue.Name,
		"",    // 消费者标识
		false, // 不自动确认
		false, // 非排他
		false, // 不等待
		false, // 不阻塞
		nil,   // 参数
	)
	if err != nil {
		return fmt.Errorf("failed to consume messages: %v", err)
	}

	// 处理消息的协程
	go func() {
		for msg := range msgs {
			// 使用recover避免因处理器panic导致消费者退出
			func() {
				defer func() {
					if r := recover(); r != nil {
						glog.Errorf(ctx, "消息处理器panic: %v", r)
						msg.Nack(false, true) // 重新入队
						c.incrementErrorCount()
					}
				}()

				// 从对象池获取消息对象
				message := msgPool.Get().(*Message)
				defer msgPool.Put(message)

				startTime := time.Now()

				err := json.Unmarshal(msg.Body, message)
				if err != nil {
					glog.Error(ctx, "Failed to unmarshal message:", err)
					msg.Nack(false, false)
					c.incrementErrorCount()
					return
				}

				// 创建新的上下文，包含trace_id
				msgCtx := ctx
				if message.TraceID != "" {
					msgCtx = context.WithValue(ctx, "trace_id", message.TraceID)
				}

				// 查找并调用对应的处理器
				c.mu.RLock()
				handler, exists := c.messageHandlers[message.Type]
				c.mu.RUnlock()

				if !exists {
					glog.Errorf(ctx, "No handler for message type: %s", message.Type)
					msg.Nack(false, false)
					c.incrementErrorCount()
					return
				}

				// 处理消息
				err = handler(msgCtx, message.Data)
				if err != nil {
					glog.Errorf(msgCtx, "Message handler error: %v", err)
					msg.Nack(false, true) // 重新入队
					c.incrementErrorCount()
				} else {
					msg.Ack(false)
					c.incrementConsumeCount()
					c.addProcessingTime(time.Since(startTime))
				}
			}()
		}
	}()

	return nil
}

// GetMetrics 获取指标数据
func (c *RabbitMQClient) GetMetrics() Metrics {
	c.mu.RLock()
	defer c.mu.RUnlock()
	return c.metrics
}

// incrementPublishCount 增加发布计数
func (c *RabbitMQClient) incrementPublishCount() {
	c.mu.Lock()
	defer c.mu.Unlock()
	c.metrics.PublishCount++
}

// incrementConsumeCount 增加消费计数
func (c *RabbitMQClient) incrementConsumeCount() {
	c.mu.Lock()
	defer c.mu.Unlock()
	c.metrics.ConsumeCount++
}

// incrementErrorCount 增加错误计数
func (c *RabbitMQClient) incrementErrorCount() {
	c.mu.Lock()
	defer c.mu.Unlock()
	c.metrics.ErrorCount++
}

// addProcessingTime 添加处理时间
func (c *RabbitMQClient) addProcessingTime(duration time.Duration) {
	c.mu.Lock()
	defer c.mu.Unlock()
	c.metrics.ProcessingTime += duration
}

// Close 关闭连接
func (c *RabbitMQClient) Close() {
	if c.channel != nil {
		c.channel.Close()
	}
	if c.conn != nil {
		c.conn.Close()
	}
}
